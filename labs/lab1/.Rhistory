knitr::opts_chunk$set(echo = TRUE)
data <- read.table("SENIC.txt")
names(data) <- c("ID","LStay","Age","InfRisk","RCR","RCXR","NumBeds","MedSchool","Region","AvgCensus","NumNurses","Facilities")
outliers <- function(vec){
quantiles <- quantile(vec, c(0.25,0.75))
pos<-which(vec>(quantiles[2]+1.5*(quantiles[2]-quantiles[1]))|vec<(quantiles[1]-1.5*(quantiles[2]-quantiles[1])))
return(pos)
}
library(ggplot2)
plot <- ggplot(data = data, aes(x=InfRisk)) + geom_density() + geom_point(data=data[outliers(data$InfRisk),],aes(x=data$InfRisk[outliers(data$InfRisk)]),y=0, shape="diamond",size=3)
print(plot)
library(gridExtra)
quant_vars <- c("LStay","Age","InfRisk","RCR","RCXR","NumBeds","AvgCensus","NumNurses")
plot_list <- lapply(quant_vars, function(varname) ggplot(data=data, aes_string(x=varname)) + geom_density() + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
plot2 <- ggplot(data=data, aes(x=InfRisk, y=NumNurses, col=NumBeds)) + geom_point()
print(plot2)
library(plotly)
ggplotly(plot)
library(dplyr)
InfRisk_quantiles <- quantile(data$InfRisk, c(0.25,0.75))
InfRisk_plot <- data %>% plot_ly(x = ~InfRisk, type="histogram") %>%
filter(is.element(InfRisk, data$InfRisk[outliers(data$InfRisk)])) %>%
add_markers(x = ~InfRisk, y=~0, marker=list(symbol=32, size=9))
InfRisk_plot
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("LStay","Age","InfRisk","RCR","RCXR","NumBeds","AvgCensus","NumNurses")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes_string(x=varname)) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
knitr::opts_chunk$set(echo = TRUE)
data <- read.table("SENIC.txt")
names(data) <- c("ID","Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Medschool Affiliation","Region","Avg. Daily Census","Number of Nurses","Facilities")
outliers <- function(vec){
quantiles <- quantile(vec, c(0.25,0.75))
pos<-which(vec>(quantiles[2]+1.5*(quantiles[2]-quantiles[1]))|vec<(quantiles[1]-1.5*(quantiles[2]-quantiles[1])))
return(pos)
}
library(ggplot2)
plot <- ggplot(data = data, aes(x=InfRisk)) + geom_density() + geom_point(data=data[outliers(data$InfRisk),],aes(x=data$InfRisk[outliers(data$InfRisk)]),y=0, shape="diamond",size=3)
print(plot)
library(ggplot2)
plot <- ggplot(data = data, aes(x=`Infection Risk`)) + geom_density() + geom_point(data=data[outliers(data$
`Infection Risk`),],aes(x=data$`Infection Risk`[outliers(data$`Infection Risk`)]),y=0, shape="diamond",size=3)
print(plot)
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
plot_list <- lapply(quant_vars, function(varname) ggplot(data=data, aes_string(x=varname)) + geom_density() + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
plot_list <- lapply(quant_vars, function(varname) ggplot(data=data, aes_string(x=varname)) + geom_density() + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
plot2 <- ggplot(data=data, aes(y=`Infection Risk`, x=`Number of Nurses`, col=NumBeds)) + geom_point()
print(plot2)
plot2 <- ggplot(data=data, aes(y=`Infection Risk`, x=`Number of Nurses`, col=`Number of Beds`)) + geom_point()
print(plot2)
knitr::opts_chunk$set(echo = TRUE)
data <- read.table("SENIC.txt")
names(data) <- c("ID","Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Medschool Affiliation","Region","Avg. Daily Census","Number of Nurses","Facilities")
outliers <- function(vec){
quantiles <- quantile(vec, c(0.25,0.75))
pos<-which(vec>(quantiles[2]+1.5*(quantiles[2]-quantiles[1]))|vec<(quantiles[1]-1.5*(quantiles[2]-quantiles[1])))
return(pos)
}
library(ggplot2)
plot <- ggplot(data = data, aes(x=`Infection Risk`)) + geom_density() + geom_point(data=data[outliers(data$
`Infection Risk`),],aes(x=data$`Infection Risk`[outliers(data$`Infection Risk`)]),y=0, shape="diamond",size=3)
print(plot)
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
plot_list <- lapply(quant_vars, function(varname) ggplot(data=data, aes_string(x=varname)) + geom_density() + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
library(gridExtra)
quant_vars <- c("`Length of Stay`","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
plot_list <- lapply(quant_vars, function(varname) ggplot(data=data, aes_string(x=varname)) + geom_density() + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
plot_list <- lapply(quant_vars, function(varname) ggplot(data=data, aes_string(x=varname)) + geom_density() + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
varname = "Length of Stay"
ggplot(data=data, aes_string(x=varname)) + geom_density() + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3)
ggplot(data=data, aes_string(x="Length of Stay")) + geom_density() + geom_point(data=data[outliers(data[,"Length of Stay"]),],aes(x=data[outliers(data[,"Length of Stay"]),"Length of Stay"]),y=0, shape="diamond",size=3)
is.element(quant_vars, names(data))
is.element(names(data),quant_vars)
which(is.element(names(data),quant_vars))
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
q.num <- which(is.element(names(data),quant_vars))
plot_list <- lapply(quant_vars, function(q.num) ggplot(data=data, aes_string(x=names(data)[q.num])) + geom_density() + geom_point(data=data[outliers(data[,q.num]),],aes(x=data[outliers(data[,q.num]),q.num]),y=0, shape="diamond",size=3))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
q.num <- which(is.element(names(data),quant_vars))
plot_list <- lapply(q.num, function(q.num) ggplot(data=data, aes_string(x=names(data)[q.num])) + geom_density() + geom_point(data=data[outliers(data[,q.num]),],aes(x=data[outliers(data[,q.num]),q.num]),y=0, shape="diamond",size=3))
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
q.num <- which(is.element(names(data),quant_vars))
plot_list <- lapply(q.num, function(q.num) ggplot(data=data, aes(x=data[,q.num])) + geom_density() + geom_point(data=data[outliers(data[,q.num]),],aes(x=data[outliers(data[,q.num]),q.num]),y=0, shape="diamond",size=3))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
q.num <- which(is.element(names(data),quant_vars))
plot_list <- lapply(q.num, function(q.num) ggplot(data=data, aes(x=data[,q.num])) + geom_density() + geom_point(data=data[outliers(data[,q.num]),],aes(x=data[outliers(data[,q.num]),q.num]),y=0, shape="diamond",size=3)) + xlab(data[q.num])
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
q.num <- which(is.element(names(data),quant_vars))
plot_list <- lapply(q.num, function(q.num) ggplot(data=data, aes(x=data[,q.num])) + geom_density() + geom_point(data=data[outliers(data[,q.num]),],aes(x=data[outliers(data[,q.num]),q.num]),y=0, shape="diamond",size=3)) + xlab(names(data)[q.num])
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
q.num <- which(is.element(names(data),quant_vars))
plot_list <- lapply(q.num, function(q.num) ggplot(data=data, aes(x=data[,q.num])) + geom_density() + geom_point(data=data[outliers(data[,q.num]),],aes(x=data[outliers(data[,q.num]),q.num]),y=0, shape="diamond",size=3))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
q.num <- which(is.element(names(data),quant_vars))
plot_list <- lapply(q.num, function(q.num) ggplot(data=data, aes(x=data[,q.num])) + geom_density() + geom_point(data=data[outliers(data[,q.num]),],aes(x=data[outliers(data[,q.num]),q.num]),y=0, shape="diamond",size=3) + + xlab(names(data)[q.num]))
library(gridExtra)
quant_vars <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
q.num <- which(is.element(names(data),quant_vars))
plot_list <- lapply(q.num, function(q.num) ggplot(data=data, aes(x=data[,q.num])) + geom_density() + geom_point(data=data[outliers(data[,q.num]),],aes(x=data[outliers(data[,q.num]),q.num]),y=0, shape="diamond",size=3) + xlab(names(data)[q.num]))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
library(plotly)
ggplotly(plot)
library(dplyr)
InfRisk_quantiles <- quantile(data$`Infection Risk`, c(0.25,0.75))
InfRisk_plot <- data %>% plot_ly(x = ~`Infection Risk`, type="histogram") %>%
filter(is.element(`Infection Risk`, data$`Infection Risk`[outliers(data$`Infection Risk`)])) %>%
add_markers(x = ~`Infection Risk`, y=~0, marker=list(symbol=32, size=9))
InfRisk_plot
library(dplyr)
InfRisk_quantiles <- quantile(data$`Infection Risk`, c(0.25,0.75))
InfRisk_plot <- data %>% plot_ly(x = ~Infection Risk, type="histogram") %>%
library(dplyr)
InfRisk_quantiles <- quantile(data$`Infection Risk`, c(0.25,0.75))
InfRisk_plot <- data %>% plot_ly(x = ~`Infection Risk`, type="histogram") %>%
filter(is.element(`Infection Risk`, data$`Infection Risk`[outliers(data$`Infection Risk`)])) %>%
add_markers(x = ~`Infection Risk`, y=~0, marker=list(symbol=32, size=9))
InfRisk_plot
library(dplyr)
InfRisk_quantiles <- quantile(data$`Infection Risk`, c(0.25,0.75))
InfRisk_plot <- data %>% plot_ly(x = ~`Infection Risk`, type="histogram") %>%
filter(is.element(`Infection Risk`, data$`Infection Risk`[outliers(data$`Infection Risk`)])) %>%
add_markers(x = ~`Infection Risk`, y=~0, marker=list(symbol=32, size=9)) %>% layout(xaxis=list(title="Infection Risk"))
InfRisk_plot
install.packages("rsconnect")
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("LStay","Age","InfRisk","RCR","RCXR","NumBeds","AvgCensus","NumNurses")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes_string(x=varname)) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(ggplot2)
library(gridExtra)
library(plotly)
library(dplyr)
library(shiny)
# Assignment 2
# 2.1 - Read the Data
data <- read.table("SENIC.txt")
names(data) <- c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")
# 2.2
outliers <- function(vec){
quantiles <- quantile(vec, c(0.25,0.75))
return(which(vec>(quantiles[2]+1.5*(quantiles[2]-quantiles[1]))|vec<(quantiles[1]-1.5*(quantiles[2]-quantiles[1]))))
}
# 2.3
plot <- ggplot(data = data, aes(x=InfRisk)) + geom_density() + geom_point(data=data[outliers(data$InfRisk),],aes(x=data$InfRisk[outliers(data$InfRisk)]),y=0, shape="diamond",size=3)
print(plot)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes_string(x=varname)) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
data[,"Length of Stay"]
outliers(data[,"Length of Stay"])
View(data)
data <- read.table("SENIC.txt")
names(data) <- c("ID","Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Medschool Affiliation","Region","Avg. Daily Census","Number of Nurses","Facilities")
View(data)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
outliers <- function(vec){
quantiles <- quantile(vec, c(0.25,0.75))
pos<-which(vec>(quantiles[2]+1.5*(quantiles[2]-quantiles[1]))|vec<(quantiles[1]-1.5*(quantiles[2]-quantiles[1])))
return(pos)
}
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
outliers <- function(vec){
quantiles <- quantile(vec, c(0.25,0.75))
pos<-which(vec>(quantiles[2]+1.5*(quantiles[2]-quantiles[1]))|vec<(quantiles[1]-1.5*(quantiles[2]-quantiles[1])))
return(pos)
}
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
outliers <- function(vec){
quantiles <- quantile(vec, c(0.25,0.75))
pos<-which(vec>(quantiles[2]+1.5*(quantiles[2]-quantiles[1]))|vec<(quantiles[1]-1.5*(quantiles[2]-quantiles[1])))
return(pos)
}
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
if(length(input$DisplayChoices)>0){
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
}
})
}
shinyApp(ui=ui, server=server)
library(shiny)
outliers <- function(vec){
quantiles <- quantile(vec, c(0.25,0.75))
pos<-which(vec>(quantiles[2]+1.5*(quantiles[2]-quantiles[1]))|vec<(quantiles[1]-1.5*(quantiles[2]-quantiles[1])))
return(pos)
}
ui <- fluidPage(
checkboxGroupInput("DisplayChoices","Select Variables:", c("Length of Stay","Age","Infection Risk","Routine Culturing Ratio","Routine Chest X-Ray","Number of Beds","Avg. Daily Census","Number of Nurses","Facilities")),
sliderInput("BWSlider","Choose Bandwidth: ",0.5,10,0.5),
verbatimTextOutput("SelectMessage"),
plotOutput("GridPlot")
)
server <- function(input, output){
output$GridPlot <- renderPlot({
validate(
need(input$DisplayChoices, "Please select at least one item.")
)
plot_list <- lapply(input$DisplayChoices, function(varname) ggplot(data=data, aes(x=data[,varname])) + geom_density(bw=input$BWSlider) + geom_point(data=data[outliers(data[,varname]),],aes(x=data[outliers(data[,varname]),varname]),y=0, shape="diamond",size=3) + xlab(varname))
grid <- arrangeGrob(grobs = plot_list)
plot(grid)
})
}
shinyApp(ui=ui, server=server)
